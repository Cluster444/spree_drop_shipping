# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a 
# newer version of cucumber-rails. Consider adding your own code to a new file 
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'spork'

ENV["RAILS_ROOT"] = File.expand_path("../../../test/dummy", __FILE__)
 
Spork.prefork do
  require 'cucumber/rails'
  require 'capybara/rails'
  require 'capybara/cucumber'
  require 'capybara/session'
  require 'factory_girl'
  require 'faker'
  
  I18n.reload!
  
  Capybara.default_driver   = :selenium
  Capybara.default_selector = :css
   
  include Warden::Test::Helpers    
  
end
 
Spork.each_run do

  # By default, any exception happening in your Rails application will bubble up
  # to Cucumber so that your scenario will fail. This is a different from how 
  # your application behaves in the production environment, where an error page will 
  # be rendered instead.
  #
  # Sometimes we want to override this default behaviour and allow Rails to rescue
  # exceptions and display an error page (just like when the app is running in production).
  # Typical scenarios where you want to do this is when you test your error pages.
  # There are two ways to allow Rails to rescue exceptions:
  #
  # 1) Tag your scenario (or feature) with @allow-rescue
  #
  # 2) Set the value below to true. Beware that doing this globally is not
  # recommended as it will mask a lot of errors for you!
  #
  ActionController::Base.allow_rescue = false
  
  # doesn't seem to work :/
  Cucumber::Rails::World.use_transactional_fixtures = false

  # Remove/comment out the lines below if your app doesn't have a database.
  # For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
  begin
    DatabaseCleaner.strategy = :transaction
  rescue NameError
    raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
  end
  
  Dir["#{File.expand_path("../../../", __FILE__)}/test/support/**/*.rb"].each { |f| require f }
  
  Before do |s| 
  
    Fixtures.reset_cache
    fixtures_folder = File.expand_path("../../../test/fixtures", __FILE__)
    fixtures = Dir[File.join(fixtures_folder, '*.yml')].map {|f| File.basename(f, '.yml') }
    Fixtures.create_fixtures(fixtures_folder, fixtures)
    
    if s.feature.name.match(/^Admin\s/)
      @user = Factory.create(:admin_user)
      login_as @user
    end    
    
  end

end
